#!/usr/bin/Rscript

###########################################################################################################################################################################################
###########################################################################################################################################################################################
###########################################################################################################################################################################################
###########################################################################################################################################################################################
###########################################################################################################################################################################################
###
# User notes:
###

# To use supply a dataframe with variables as columns,
# a string of the dependent variable and
# the highest k-value you wish.

###
# User edits needed:
###

# Location of where to save the outputs.
# This is the last few lines of the function.

###
# Output settings (3 files)
###

# Subset for all variables is p < 0.05
# Subset for top 25 models using AIC()
# Produces complete meta
###########################################################################################################################################################################################
###########################################################################################################################################################################################
###########################################################################################################################################################################################
###########################################################################################################################################################################################
###########################################################################################################################################################################################

library(data.table)
library(mgcv)
library(tidyr)
library(dplyr)


multi.model.multi.var.GAM.automation.function <- function(df, dependent.var, k.value){
  
  # Model Notes:
  # s() assumes similar scaling in the variables
  # therefore used ti()
  
  #All possible modesl up to 3 variables acting indpendently.
  #model1 <- gam(Alg ~ ti(dependent.varX), data = df)
  #model2 <- gam(Alg ~ ti(dependent.varX) + ti(depedent.varY), data = df)
  #model3 <- gam(Alg ~ ti(dependent.varX) + ti(depedent.varY) + ti(dependent.varZ), data = df)
  
  # Include independent vairbales if they have an effect alone
  # but also include them in subsequent variables if they also effect on
  # that variable i.e. week can have an effect of Algal but week can also
  # affect Sun and Sun affect Algal. (Think of chain reactions Week -> Sun -> Algal)
  # German statisicaian refers to the error of not doing so as Marginalit?tstheorem
  # But like this the model includes the main effects and the interaction
  #model4 <- gam(Alg ~ ti(dependent.varX, dependent.varY), data = df)
  #model5 <- gam(Alg ~ ti(dependent.varX) + ti(dependent.varX, dependent.varY), data = df)
  
  # Build a more detailed model
  #model6 <- gam(Alg ~ ti(dependent.varX, dependent.varY) + ti(dependent.varX, dependent.varZ), data = df)
  #model7 <- gam(Alg ~ ti(dependent.varX) + ti(dependent.varX, dependent.varY) + ti(dependent.varX, dependent.varZ), data = df)
  
  # Compare models or use ANOVA
  #AIC(model1, model2, model3, model4, model5, model6, model7)
  
  ##############################################################################################################################################################################
  # Function creation
  ##############################################################################################################################################################################
  var1 <- colnames(df[ , !(names(df) %in% dependent.var)])
  var2 <- var1
  var3 <- var1
  # Two variables
  vardf.2 <- cbind.data.frame(var1, var2)
  colnames(vardf.2) <- c("first", "second")
  vardf.2 <- expand(vardf.2, first, second)
  vardf.2 <- vardf.2[apply(vardf.2, MARGIN =  1, FUN = function(x) !any(duplicated(x))), ]
  # Three variables
  vardf.3 <- cbind.data.frame(var1, var2, var3)
  colnames(vardf.3) <- c("first", "second", "third")
  vardf.3 <- expand(vardf.3, first, second, third)
  vardf.3 <- vardf.3[apply(vardf.3, MARGIN =  1, FUN = function(x) !any(duplicated(x))), ]
  # Create models
  k.value <- rev(1:k.value)
  models <- list()
  for (i in seq(1:length(k.value))){
    model1 <- paste("~ ti(", var1, ", k = ", k.value, ")")
    model2 <- paste("~ ti(", vardf.2$first, ", k =", k.value, ") + ti(", vardf.2$second, ", k = ", k.value, ")")
    model3 <- paste("~ ti(", vardf.3$first, ", k = ", k.value, ") + ti(", vardf.3$second, ", k = ", k.value, ") + ti(", vardf.3$third, ", k = ", k.value, ")")
    model4 <- paste("~ ti(", vardf.2$first, ",", vardf.2$second, ", k = ", k.value, ")")
    model5 <- paste("~ ti(", vardf.2$first, ", k = ", k.value, ") + ti(", vardf.2$first, ",", vardf.2$second, ", k = ", k.value, ")")
    model6 <- paste("~ ti(", vardf.3$first, ",", vardf.3$second, ", k = ", k.value, ") + ti(", vardf.3$first, ",", vardf.3$third, ", k = ", k.value, ")")
    model7 <- paste("~ ti(", vardf.3$first, ", k = ", k.value, ") + ti(", vardf.3$first, ",", vardf.3$second, ", k = ", k.value, ") + ti(", vardf.3$first, ",", vardf.3$third, ", k = ", k.value, ")")
    modelx <- c(model1, model2, model3, model4, model5, model6)
    models[[i]] <- modelx
  }
  
  models <- as.data.frame(matrix(unlist(models), nrow=length(models), byrow=T))
  models <- data.frame(model = c(t(models)), stringsAsFactors=FALSE)
  models <- models[["model"]]
  
  ###
  # GAM function
  ###
  gam.func <- function(x){
    tryCatch(model <- gam(as.formula(paste0(dependent.var, x)), data = df, method = "ML", select = TRUE),
             error = function(e) message("Problem....", as.character(e)))
  }
  ###
  # GAM implementation
  ###
  # Automated GAM function on all possible combinations of
  # variables for all models
  
  ###############################################################################################################
  # All Models
  ###############################################################################################################
  modelx.results <- lapply(models, function(x) gam.func(x))
  modelx.summary <- lapply(modelx.results, summary)
  
  modelx.lst <- list()
  for (i in seq(1:length(modelx.summary))){
    form <- modelx.summary[[i]]$formula[3]
    r2.adj <- modelx.summary[[i]]$r.sq
    t = modelx.summary[[i]]$p.t
    var1.p <- modelx.summary[[i]]$s.table[1,4]
    var2.p <- tryCatch(modelx.summary[[i]]$s.table[2,4], error = function(e) 0)
    var3.p <- tryCatch(modelx.summary[[i]]$s.table[3,4], error = function(e) 0)
    var1.F <- modelx.summary[[i]]$s.table[1,3]
    var2.F <- tryCatch(modelx.summary[[i]]$s.table[2,3], error = function(e) 0)
    var3.F <- tryCatch(modelx.summary[[i]]$s.table[3,3], error = function(e) 0)
    loop.df <- data.frame(cbind(
      form=form, 
      r2.adj=r2.adj,
      var1.p=var1.p,
      var2.p=var2.p,
      var3.p=var3.p,
      var1.F=var1.F,
      var2.F=var2.F,
      var3.F=var3.F,
      t=t))
    modelx.lst[[i]] <- loop.df
  }
  
  
  modelx_output <- as.data.frame(matrix(unlist(modelx.lst), nrow=length(modelx.lst), byrow=T))
  modelx_output$A.I.C <- sapply(X = modelx.results, FUN = AIC)
  colnames(modelx_output) <- c("Formula", "r2.adj", "var1.p", "var2.p", "var3.p", "var1.F", "var2.F", "var3.F", "t", "A.I.C")
  
  #modelx_outputs
  modelx_outputs <- data.frame(Formula = 1:length(row.names(modelx_output)))
  modelx_outputs$Formula <- as.character(unlist(modelx_output$Formula, use.names = FALSE))
  modelx_outputs$r2.adj <- as.numeric(as.character(unlist(modelx_output$r2.adj, use.names = FALSE)))
  modelx_outputs$var1.p <- as.numeric(as.character(unlist(modelx_output$var1.p, use.names = FALSE)))
  modelx_outputs$var2.p <- as.numeric(as.character(unlist(modelx_output$var2.p, use.names = FALSE)))
  modelx_outputs$var3.p <- as.numeric(as.character(unlist(modelx_output$var3.p, use.names = FALSE)))
  modelx_outputs$var1.F <- as.numeric(as.character(unlist(modelx_output$var1.F, use.names = FALSE)))
  modelx_outputs$var2.F <- as.numeric(as.character(unlist(modelx_output$var2.F, use.names = FALSE)))
  modelx_outputs$var3.F <- as.numeric(as.character(unlist(modelx_output$var3.F, use.names = FALSE)))
  modelx_outputs$t <- as.numeric(as.character(unlist(modelx_output$t, use.names = FALSE)))
  modelx_outputs$A.I.C <- as.numeric(as.character(unlist(modelx_output$A.I.C, use.names = FALSE)))
  
  # Subset by p_values
  modelx_P_outputs <- subset(modelx_outputs, var1.p < 0.05 & var2.p < 0.05 & var3.p < 0.05) # USER ADJUSTMENT POSSIBLE
  # Subset by p_values
  modelx_P_outputs <- subset(modelx_outputs, var1.p < 0.05) # USER ADJUSTMENT POSSIBLE
  # Subset by AIC
  df.nme <- deparse(substitute(df))
  modelx_AIC_outputs <- as.data.table(modelx_outputs)
  modelx_AIC_outputs <- modelx_AIC_outputs[, .SD[A.I.C %in% head(sort(unique(A.I.C)), 25)]]
  # Full Meta
  modelx_Meta_outputs <- as.data.table(modelx_outputs)
  
  # Save
  #assign(paste0(df.nme, "_modelx_P_outputs"), modelx_P_outputs, envir=globalenv()) # Send result to the global environment.
  #assign(paste0(df.nme, "_modelx_AIC_outputs"), modelx_AIC_outputs, envir=globalenv()) # Send result to the global environment.
  #assign(paste0(df.nme, "_modelx_Meta_outputs"), modelx_Meta_outputs, envir=globalenv()) # Send result to the global environment.
  
  write.csv(x = modelx_P_outputs, file = paste0("GAM_data/Outputs/", df.nme, "_modelx_P_Results.csv"), row.names = FALSE)
  write.csv(x = modelx_AIC_outputs, file = paste0("GAM_data/Outputs/", df.nme, "_modelx_AIC_Results.csv"), row.names = FALSE)
  write.csv(x = modelx_Meta_outputs, file = paste0("GAM_data/Outputs/", df.nme, "_modelx_Meta_Results.csv"), row.names = FALSE)
  
  #write.csv(x = modelx_P_outputs, file = paste0("Data/Multi_Model_GAM_Regression_Results_For_Transformed_Data/Visual_Subsets/", df.nme, "_modelx_P_Results.csv"), row.names = FALSE)
  #write.csv(x = modelx_AIC_outputs, file = paste0("Data/Multi_Model_GAM_Regression_Results_For_Transformed_Data/Visual_Subsets/", df.nme, "_modelx_AIC_Results.csv"), row.names = FALSE)
  #write.csv(x = modelx_Meta_outputs, file = paste0("Data/Multi_Model_GAM_Regression_Results_For_Transformed_Data/Visual_Subsets/", df.nme, "_modelx_Meta_Results.csv"), row.names = FALSE)
  
}


Example:
Apr17 <- read.csv("Data/Transformed_Data_Distribution/Apr_17.csv")[,c(-14,-15,-16)]
multi.model.multi.var.GAM.automation.function(Apr17, "Alg", 30)

